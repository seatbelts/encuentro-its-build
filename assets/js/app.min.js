(function() {
	return angular.module('its.categorias',[]);
})();
(function() {
	return angular.module('its.auth',[]);
})();
(function() {
	return angular.module('its.listado',[]);
})();
(function() {
	return angular.module('its.maestros',[]);
})();
(function() {
	return angular.module('its.materias',[]);
})();

(function() {
	return angular.module('its.proyectos',[]);
})();

(function() {
	return angular.module('its.usuarios',[]);
})();

(function() {
	var CategoriasRoutes;
	CategoriasRoutes = function($stateProvider) {
		return $stateProvider.state('app.categorias', {
			url: '/categorias',
			views: {
				'contentView': {
					templateUrl: 'modules/categorias/views/categorias.html',
					controller: 'CategoriasController'
				}
			}
		});
	};
	return angular.module('its.categorias').config(CategoriasRoutes);
})();
(function() {
	var AuthRoutes;
	AuthRoutes = function($stateProvider) {
		return $stateProvider.state('login', {
			url: '/login',
			views: {
				'mainView': {
					templateUrl: 'modules/auth/views/login.html',
					controller: 'LoginController'
				}
			}
		})
		.state('signup', {
			url: '/signup',
			views: {
				'mainView': {
					templateUrl: 'modules/auth/views/signup.html',
					controller: 'SignupController'
				}
			}
		});
	};
	return angular.module('its.auth').config(AuthRoutes);
})();
(function() {
	var ListadoRoutes;
	ListadoRoutes = function($stateProvider) {
		return $stateProvider.state('app.listado', {
			url: '/listado',
			views: {
				'contentView': {
					templateUrl: 'modules/listado/views/listado.html',
					controller: 'ListadoController'
				}
			}
		})
		.state('app.viewProject', {
			url: '/ver/:id',
			views: {
				'contentView': {
					templateUrl: 'modules/listado/views/detalle.html',
					controller: 'DetalleProyectoController'
				}
			}
		});
	};
	return angular.module('its.listado').config(ListadoRoutes);
})();
(function() {
	var MaestrosRoutes;
	MaestrosRoutes = function($stateProvider) {
		return $stateProvider.state('app.maestros', {
			url: '/maestros',
			views: {
				'contentView': {
					templateUrl: 'modules/maestros/views/maestros.html',
					controller: 'MaestrosController'
				}
			}
		})
		.state('app.crear', {
			url: '/crear',
			views: {
				'contentView': {
					templateUrl: 'modules/maestros/views/crearMaestros.html',
					controller: 'CrearMaestrosController'
				}
			}
		});
	};
	return angular.module('its.maestros').config(MaestrosRoutes);
})();
(function() {
	var MateriasRoutes;
	MateriasRoutes = function($stateProvider) {
		return $stateProvider.state('app.materias', {
			url: '/materias',
			views: {
				'contentView': {
					templateUrl: 'modules/materias/views/materias.html',
					controller: 'MateriasController'
				}
			}
		});
	};
	return angular.module('its.materias').config(MateriasRoutes);
})();
(function() {
	var ProyectosRoutes;
	ProyectosRoutes = function($stateProvider) {
		return $stateProvider.state('app.proyectos', {
			url: '/proyectos',
			views: {
				'contentView': {
					templateUrl: 'modules/proyectos/views/proyectos.html',
					controller: 'ProyectosController',
					controllerAs: 'pc'
				}
			}
		})
		.state('app.inscribir', {
			url: '/inscribir',
			views: {
				'contentView': {
					templateUrl: 'modules/proyectos/views/inscribir.html',
					controller: 'InscribirController',
					controllerAs: 'ipc'
				}
			}
		});
	};
	return angular.module('its.proyectos').config(ProyectosRoutes);
})();
(function() {
    'use strict';

    return angular
        .module('API', [])
        .factory('APIServices', APIServices);

    APIServices.$inject = ['$http'];

    function APIServices($http) {

        // var url = 'http://localhost:8001';
        var url = 'https://itsubscriber.herokuapp.com:80';
        var endpoints = {};
        endpoints = {
            login: url + '/login/',
            register: url + '/register/',
            eventos: url + '/v1/eventos/',
            proyectos: url + '/v1/proyectos/',
            equipos: url + '/v1/equipos/',
            alumnos: url + '/v1/alumnos/',
            usuarios: url + '/v1/usuarios/',
            materias: url + '/v1/materias/',
            maestros: url + '/v1/maestros/',
            categorias: url + '/v1/categorias/'
        };

        var services = {
            login: login,
            register: register,
            // Create
			createEvents: createEvents,
			createProjects: createProjects,
			createTeams: createTeams,
			createStudents: createStudents,
			createSubject: createSubject,
            createTeachers: createTeachers,
			createCategories: createCategories,
			// Read
			getEvents: getEvents,
			getProjects: getProjects,
            getOneProject: getOneProject,
			getTeams: getTeams,
			getStudents: getStudents,
			getSubject: getSubject,
			getTeachers: getTeachers,
            getCategories: getCategories,
			// Update
			updateEvents: updateEvents,
			updateProjects: updateProjects,
			updateTeams: updateTeams,
			updateStudents: updateStudents,
			updateSubject: updateSubject,
			updateTeachers: updateTeachers,
            updateCategories: updateCategories,
			// Delete
			deleteEvents: deleteEvents,
			deleteProjects: deleteProjects,
			deleteTeams: deleteTeams,
			deleteStudents: deleteStudents,
			deleteSubject: deleteSubject,
			deleteTeachers: deleteTeachers,
            deleteCategories: deleteCategories,
            getUrl: getUrl
        };

        return services;

        // Private functions
        function response(res) {
            return res;
        }

        function login(credentials) {
            return $http({
                    method: 'POST',
                    url: endpoints.login,
                    data: $.param(credentials),
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded'
                    }
                })
                .then(response)
                .catch(response);
        }

        function register(credentials) {
            return $http({
                method: 'POST',
                url: endpoints.register,
                data: $.param(credentials),
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded'
                }
            })
            .then(response)
            .catch(response);
        }

        /*
         * Create Services
         */

        function createEvents(data) {
            return $http.post(endpoints.eventos, data)
                .then(response)
                .catch(response);
        }

        function createProjects(data) {
            return $http.post(endpoints.proyectos, data)
                .then(response)
                .catch(response);
        }

        function createTeams(data) {
            return $http.post(endpoints.equipos, data)
                .then(response)
                .catch(response);
        }

        function createStudents(data) {
            return $http.post(endpoints.alumnos, data)
                .then(response)
                .catch(response);
        }

        function createSubject(data) {
            return $http.post(endpoints.materias, data)
                .then(response)
                .catch(response);
        }

        function createTeachers(data) {
            return $http.post(endpoints.maestros, data)
                .then(response)
                .catch(response);
        }

        function createCategories(data) {
            return $http.post(endpoints.categorias, data)
                .then(response)
                .catch(response);
        }

        /*
         * Read Services
         */

        function getEvents() {
            return $http.get(endpoints.eventos)
                .then(response)
                .catch(response);
        }

        function getProjects() {
            return $http.get(endpoints.proyectos)
                .then(response)
                .catch(response);
        }

        function getOneProject(id) {
            url = endpoints.proyectos + '' + id + '/';
            console.log(url);
            return $http.get(url)
                .then(response)
                .catch(response);
        }

        function getTeams() {
            return $http.get(endpoints.equipos)
                .then(response)
                .catch(response);
        }

        function getStudents() {
            return $http.get(endpoints.alumnos)
                .then(response)
                .catch(response);
        }

        function getSubject() {
            return $http.get(endpoints.materias)
                .then(response)
                .catch(response);
        }

        function getTeachers() {
            return $http.get(endpoints.maestros)
                .then(response)
                .catch(response);
        }

        function getCategories() {
            return $http.get(endpoints.categorias)
                .then(response)
                .catch(response);
        }

        /*
         * Update Services
         */

        function updateEvents(url, obj) {
            return $http.put(url, obj)
                .then(response)
                .catch(response);
        }

        function updateProjects(url, obj) {
            return $http.put(url, obj)
                .then(response)
                .catch(response);
        }

        function updateTeams(url, obj) {
            return $http.put(url, obj)
                .then(response)
                .catch(response);
        }

        function updateStudents(url, obj) {
            return $http.put(url, obj)
                .then(response)
                .catch(response);
        }

        function updateSubject(url, obj) {
            return $http.put(url, obj)
                .then(response)
                .catch(response);
        }

        function updateTeachers(url, obj) {
            return $http.put(url, obj)
                .then(response)
                .catch(response);
        }

        function updateCategories(url, obj) {
            return $http.put(url, obj)
                .then(response)
                .catch(response);
        }

        /*
         * Delete Services
         */

        function deleteEvents(url) {
            return $http.delete(url)
                .then(response)
                .catch(response);
        }

        function deleteProjects(url) {
            return $http.delete(url)
                .then(response)
                .catch(response);
        }

        function deleteTeams(url) {
            return $http.delet(url)
                .then(response)
                .catch(response);
        }

        function deleteStudents(url) {
            return $http.delete(url)
                .then(response)
                .catch(response);
        }

        function deleteSubject(url) {
            return $http.delete(url)
                .then(response)
                .catch(response);
        }

        function deleteTeachers(url) {
            return $http.delete(url)
                .then(response)
                .catch(response);
        }

        function deleteCategories(url) {
            return $http.delete(url)
                .then(response)
                .catch(response);
        }

        function getUrl () {
            return url;
        }

    }

})();

(function() {
	var UsuariosRoutes;
	UsuariosRoutes = function($stateProvider) {
		return $stateProvider.state('app.usuario', {
			url: '/perfil',
			views: {
				'contentView': {
					templateUrl: 'modules/usuarios/views/perfil.html',
					controller: 'UsuarioController',
					controllerAs: 'uc'
				}
			}
		});
	};
	return angular.module('its.usuarios').config(UsuariosRoutes);
})();
angular.module('its.categorias')
	.controller('CategoriasController', ['$scope', '$rootScope', function($scope, $rootScope){
		$scope.categorias = {};
	}])
angular.module('its.auth')

	.controller('LoginController', ['$scope', '$state', '$rootScope', 'APIServices', 'toaster', '$localStorage',
		function($scope, $state, $rootScope, APIServices, toaster, $localStorage){
		
		$localStorage.user = {};

		$scope.model = {};
		$scope.model.username = null;
		$scope.model.password = null;

		var validarForm = function (testObject) {
			var k, l, s, v;
		    s = Object.keys(testObject).length;
      		l = 0;
			for (k in testObject) {
				v = testObject[k];
				l++;
				if (!v || v === '') {
					switch(k) {
						case 'username':
							toaster.pop('error', 'Falta poner la matricula');
							console.log(k);
							return false;
						case 'password':
							toaster.pop('error', 'Falta poner la contrasena');
							console.log(k);
							return false;
					}
				} else if (l === s) {
				    return true;
        		}

			}
		}

		$scope.login = function() {
			$scope.validarObject = $scope.model;
			if (validarForm($scope.validarObject)){
				APIServices.login($scope.model)
					.then(function (res) {
						console.log('APIServices', res);
						if (res.status === 200) {
							// Redirect to dashboard
							console.log('Redirect to dashboard')
							toaster.pop('success', 'Exito', 'Login exitoso');
							$localStorage.user = res.data;
							$state.go('app.dashboard');
						} else {
							$localStorage.user = {};
							toaster.pop('error', 'Error', 'Error al iniciar sesion');
							console.log('Unable to log');
						}
					});
				}
		};

	}]);
angular.module('its.auth')
	.controller('SignupController', ['$scope', '$state', '$rootScope', '$localStorage', 'toaster', 'APIServices', function($scope, $state, $rootScope, $localStorage, toaster, APIServices){
		
		$scope.model = {};
		$scope.model.username = null;
		$scope.model.first_name = null;
		$scope.model.last_name = null;
		$scope.model.email = null;
		$scope.model.telefono = null;
		$scope.model.password = null;
		$scope.model.passwordRepeat = null;

		var validarForm = function (testObject) {
			var k, l, s, v;
		    s = Object.keys(testObject).length;
      		l = 0;
			for (k in testObject) {
				v = testObject[k];
				l++;
				if (!v || v === '') {
					switch(k) {
						case 'username':
							toaster.pop('error', 'Información Faltante', 'Ingresar Matrícula');
							console.log(k);
							return false;
						case 'first_name':
							toaster.pop('error', 'Información Faltante', 'Ingresar Nombre(s)');
							console.log(k);
							return false;
						case 'last_name':
							toaster.pop('error', 'Información Faltante', 'Ingresar Apellidos');
							console.log(k);
							return false;

						case 'email':
							toaster.pop('error', 'Información Faltante', 'Ingresar correo');
							console.log(k);
							return false;
						case 'telefono':
							toaster.pop('error', 'Información Faltante', 'Ingresar Teléfono');
							return false;
						case 'password':
							toaster.pop('error', 'Información Faltante', 'Ingresar Contraseña');
							console.log(k);
							return false;
						case 'passwordRepeat':
							toaster.pop('error', 'Información Faltante', 'Repetir contraseña');
							console.log(k);
							return false;
					}
				} else if (l === s) {
					if (testObject.password != testObject.passwordRepeat) {
						toaster.pop('error', 'Error de Validación', 'Las contraseñas no coinciden');
						console.log('las contrasenas no coinciden');
						return false;
					}
          			return true;
        		}

			}
		}

		$scope.signup = function() {
			$scope.validarObject = $scope.model;
			console.log($scope.validarObject);
			if (validarForm($scope.validarObject)) {
				delete $scope.model.passwordRepeat;
				console.log($scope.model);
				// Hacer el post
				APIServices.register($scope.model)
					.then(function(res) {
						console.log('APIServices', res);
						if (res.status === 201) {
							// Redirect to dashboard
							$scope.model = {};
							console.log('Redirect to dashboard')
							toaster.pop('success', 'Exito', 'La cuenta se creo con exito');
							$localStorage.user = res.data;
						} else {
							$localStorage.user = {};
							toaster.pop('error', 'Error', 'Error al crear usuario');
							console.log('Unable to log');
						}
					})
				toaster.pop('success', '!Correcto¡', 'Cuenta Creada');
				$state.go('app.dashboard');
			}
		};

	}]);
angular.module('its.auth')
  .factory('AuthService', ['$http', '$rootScope', '$q', function($http, Session, $rootScope, $q){
    
    var authService = {}

    authService.login = function(credentials) {
      return $http({
        method: 'POST',
        url: $rootScope.baseUrl + '/login',
        data: $.param(credentials),
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded'
        }
      }).then(function(data) {
        $rootScope.permissions = {};
        $rootScope.permissions[data.rol.nombre] = true;
        return data;
      }).catch(function(err) {
        return err;
      });
    };

    /*authService.logout = function() {
      return $http({
        method: 'delete',
        url: $rootScope.baseUrl + '/logout'
      }).success((function(_this) {
        return function() {
          Session.destroy;
          $rootScope.$broadcast('unauthorized');
        };
      })(this)).error(function(err) {
        return console.log(err);
      });
    };
    authService.sessionInfo = function() {
      return Session.get();
    };
    authService.getPermissions = function() {
      var permissions;
      permissions = {};
      if (Session.get()) {
        permissions[Session.get().rol.nombre] = true;
      }
      return permissions;
    };
    authService.isAuthenticated = function() {
      if (Session.get() === void 0) {
        return false;
      } else {
        return true;
      }
    };
    authService.authorize = function(permissions) {
      var i, len, permission;
      for (i = 0, len = permissions.length; i < len; i++) {
        permission = permissions[i];
        if ($rootScope.permissions[permission]) {
          return true;
        }
      }
      return false;
    };*/


    return authService;
  }]);
(function() {
  var Session;
  Session = function($sessionStorage) {
    this.get = (function(_this) {
      return function() {
        return $sessionStorage.current;
      };
    })(this);
    this.create = (function(_this) {
      return function(user) {
        return $sessionStorage.current = user;
      };
    })(this);
    this.destroy = (function(_this) {
      return function() {
        return delete $sessionStorage.current;
      };
    })(this);
    return this;
  };
  return angular.module('its.auth').service('Session', Session);
})();
angular.module('its.listado')
	.controller('DetalleProyectoController', ['$scope', '$rootScope', '$stateParams', 'APIServices', function($scope, $rootScope, $stateParams, APIServices){
		
		$scope.proyecto = {};

		getDetalle = function() {
			APIServices.getOneProject($stateParams.id)
				.then(function(res) {
					console.log(res);
					if (res.status === 200) {
						$scope.proyecto = res.data;
						console.log($scope.proyecto);
					}
				});
		};

		getDetalle();
	}]);
angular.module('its.listado')
	.controller('ListadoController', ['$scope', '$state', '$rootScope', 'APIServices', function($scope, $state, $rootScope, APIServices){

		$scope.proyectos = {};

		getAllProjects = function() {
			APIServices.getProjects()
				.then(function(res) {
					console.log(res);
					if (res.status === 200) {
						$scope.proyectos = res.data;
						console.log($scope.proyectos);
					}
				});
		}

		$scope.viewProject = function(id) {
			console.log(id);
			$state.go('app.viewProject', {id: id});
		}
		
		getAllProjects();
	}]);
angular.module('its.maestros')
	.controller('CrearMaestrosController', ['$scope', '$rootScope', 'toaster', 'APIServices', function($scope, $rootScope, toaster, APIServices){
		$scope.maestro = {};

		$scope.crear = function() {
			APIServices.createTeacher($scope.maestro)
				.then(function(res) {
					console.log(res);
				})
		}
	}])
angular.module('its.maestros')
	.controller('MaestrosController', ['$scope', '$state', '$rootScope', 'APIServices', function($scope, $state, $rootScope, APIServices) {


		$scope.maestros = {};

		$scope.crearMaestro = function() {
			console.log('test');
			$state.go('app.crear');
		};
	}])
angular.module('its.materias')
	.controller('MAteriasController', ['$scope', '$rootScope', function($scope, $rootScope){
		$scope.materias= {};
	}])
angular.module('its.proyectos')
    .controller('InscribirController', ['$state', 'APIServices', 'toaster', function($state, APIServices, toaster) {

        var ipc = this;
        // Arreglos con promises de los servicios
        ipc.materias = [];
        ipc.categorias = [];
        ipc.alumnos = [];

        // Variable temporal para agregar al arreglo de alumnos del equipo
        ipc.integrante = {};

        // Project model
        ipc.project = {};
        ipc.project = {
            nombre: '',
            description: '', //Remove after
            mesa: '1', //Remove after
            // archivo: '',
            // evento: 1, //Default evento 1
            categoria: '',
            materia: []
            // integrantes: []
        };

        ipc.checkSubjects = function(e) {
            if (e.isChecked) {
                ipc.project.materia.push(e);
            } else {
                var pos = ipc.project.materia.indexOf(e);
                ipc.project.materia.splice(pos, 1);
            }
        }

        ipc.addStudent = function(student) {
            var pos = ipc.project.integrantes.indexOf(student);
            if (pos > -1) {
                toaster.pop('warning', 'Ya ha sido agregado este estudiante');
            } else {
                ipc.project.integrantes.push(student);
                toaster.pop('success', 'Estudiante agregado');
            }
        };

        ipc.removeStudent = function(student) {
            toaster.pop('warning', 'Estudiante eliminado');
            var pos = ipc.project.integrantes.indexOf(student);
            ipc.project.integrantes.splice(pos, 1);
        }

        function activate() {
            APIServices.getSubject()
                .then(function(res) {
                    ipc.materias = res.data;
                });

            APIServices.getCategories()
                .then(function(res) {
                    ipc.categorias = res.data;
                });

            APIServices.getStudents()
                .then(function(res) {
                    ipc.alumnos = res.data;
                });
        }

        activate();

        // TODO Revisar de nuevo las validaciones
        var validarProyecto = function(testObject) {
            var k, l, s, v;
            s = Object.keys(testObject).length;
            l = 0;
            for (k in testObject) {
                v = testObject[k];
                l++;
                if (!v || v === '') {
                    switch (k) {
                        case 'nombre':
                            toaster.pop('error', 'Falta informacion','Falta poner el nombre del proyecto');
                            console.log(k);
                            return false;
                        case 'materia':
                            toaster.pop('error', 'Falta informacion','Falta seleccionar alguna materia');
                            console.log(k);
                            return false;
                        case 'categorias':
                            toaster.pop('error', 'Falta informacion', 'Falta seleccionar categoria');
                            console.log(k);
                            return false;
                    }
                } else if (l === s) {
                    return true;
                }

            }
        }

        ipc.inscribir = function() {

            // TODO Validar magicamente 
            // ipc.validarProy = ipc.proyecto;
            // if (validarProyecto(ipc.validarProy)) {
            //     toaster.pop('success', 'Proyecto Creado');
            // }


            var data = {
				nombre: ipc.project.nombre,
				description: ipc.project.description,
				categoria: ipc.project.categoria.url,
				evento: APIServices.getUrl() + '/v1/eventos/1/',
				mesa: ipc.project.mesa,
				// Check this service
				archivo: ipc.project.archivo,
				materia: []
            };
			ipc.project.materia.forEach( function(element, index) {
				data.materia.push(element.url);
			});

            if (validarProyecto(data)) {
                APIServices.createProjects(data)
                    .then(function(res){
                        toaster.pop('success', 'Proyecto creado');
                    })
                    .catch(function (error) {
                        toaster.pop('warning', 'Ha ocurrido un problema');
                    });
            }

        };
    }]);

(function() {
	var ProyectosController;
	ProyectosController = function(APIServices) {

		var pc = this;
		pc.projects = [];

		function activate () {
		 	APIServices.getProjects()
		 		.then(function(res){
		 			console.log('pc.projects', res)
		 			pc.projects = res.data;
		 		})
		}

		activate();

		// TODO Agregar otra vista para ver la informacion del proyecto

		pc.proyecto = {};
	    pc.proyecto.integrantes = [];
	    pc.integrantes = {};

	    pc.nuevoIntegrante = function() {
			console.log(pc.integrantes);
			pc.proyecto.integrantes.push(pc.integrantes);
			console.log(pc.proyecto.integrantes);
			pc.integrantes = {};
		};

	};
	return angular.module('its.proyectos').controller('ProyectosController', ProyectosController);
})();


(function() {
	var UsuarioController;
	UsuarioController = function(APIServices, $localStorage) {

		var uc = this;
		uc.user = {};
		uc.user = $localStorage.user;

		console.log(uc.user)
	};
	return angular.module('its.usuarios').controller('UsuarioController', UsuarioController);
})();
/***
Metronic AngularJS App Main Script
***/

/* Metronic App */
var MetronicApp = angular.module("MetronicApp", [
    "ui.router",
    "ngAnimate",
    "toaster",
    "ui.bootstrap", 
    "oc.lazyLoad",  
    "ngSanitize",
    "ngRoute",
    "templates",
    'API',
    "ngStorage",
    "its.auth",
    "its.listado",
    "its.proyectos",
    "its.usuarios",
    "its.maestros",
    "its.materias",
    "its.categorias",
]); 

/* Configure ocLazyLoader(refer: https://github.com/ocombe/ocLazyLoad) */
MetronicApp.config(['$ocLazyLoadProvider', function($ocLazyLoadProvider) {
    $ocLazyLoadProvider.config({
        // global configs go here
    });
}]);

/********************************************
 BEGIN: BREAKING CHANGE in AngularJS v1.3.x:
*********************************************/
/**
`$controller` will no longer look for controllers on `window`.
The old behavior of looking on `window` for controllers was originally intended
for use in examples, demos, and toy apps. We found that allowing global controller
functions encouraged poor practices, so we resolved to disable this behavior by
default.

To migrate, register your controllers with modules rather than exposing them
as globals:

Before:

```javascript
function MyController() {
  // ...
}
```

After:

```javascript
angular.module('myApp', []).controller('MyController', [function() {
  // ...
}]);

Although it's not recommended, you can re-enable the old behavior like this:

```javascript
angular.module('myModule').config(['$controllerProvider', function($controllerProvider) {
  // this option might be handy for migrating old apps, but please don't use it
  // in new ones!
  $controllerProvider.allowGlobals();
}]);
**/

//AngularJS v1.3.x workaround for old style controller declarition in HTML
MetronicApp.config(['$controllerProvider', function($controllerProvider) {
  // this option might be handy for migrating old apps, but please don't use it
  // in new ones!
  $controllerProvider.allowGlobals();
}]);

/********************************************
 END: BREAKING CHANGE in AngularJS v1.3.x:
*********************************************/

/* Setup global settings */
MetronicApp.factory('settings', ['$rootScope', function($rootScope) {
    // supported languages
    var settings = {
        layout: {
            pageSidebarClosed: false, // sidebar menu state
            pageContentWhite: true, // set page content layout
            pageBodySolid: false, // solid body color state
            pageAutoScrollOnLoad: 1000 // auto scroll to top on page load
        },
        assetsPath: '../assets',
        globalPath: '../assets/global',
        layoutPath: '../assets/layouts/layout2',
    };

    $rootScope.settings = settings;

    return settings;
}]);


/* Setup App Main Controller */
MetronicApp.controller('AppController', ['$scope', '$rootScope', function($scope, $rootScope) {
    $scope.$on('$viewContentLoaded', function() {
        App.initComponents(); // init core components
        //Layout.init(); //  Init entire layout(header, footer, sidebar, etc) on page load if the partials included in server side instead of loading with ng-include directive 
        
    });
}]);


MetronicApp.controller('DashboardController', ['$scope', 'APIServices', function($scope, APIServices) {
    console.log('DashboardController')
}]);


/***
Layout Partials.
By default the partials are loaded through AngularJS ng-include directive. In case they loaded in server side(e.g: PHP include function) then below partial 
initialization can be disabled and Layout.init() should be called on page load complete as explained above.
***/

/* Setup Layout Part - Header */
MetronicApp.controller('HeaderController', ['$scope', function($scope) {
    $scope.$on('$includeContentLoaded', function() {
        Layout.initHeader(); // init header
    });
}]);

/* Setup Layout Part - Sidebar */
MetronicApp.controller('SidebarController', ['$scope', '$state', '$localStorage', function($scope, $state, $localStorage) {
    $scope.$on('$includeContentLoaded', function() {
        Layout.initSidebar(); // init sidebar
    });

    $scope.isAdmin = false;
    $scope.isLogged = false;
    $scope.isUser = false;

    checkSession = function () {
        if ($localStorage.user.role) {
            $scope.isLogged = true;
            if ($localStorage.user.role === 'admin') {
                $scope.isAdmin = true;
            } else {
                $scope.isUser = true;
            }
        }
    }

    $scope.gotoListado = function() {
        $state.go('app.listado');
    };

    console.log($localStorage.user);

    checkSession();

}]);

/* Setup Layout Part - Quick Sidebar */
MetronicApp.controller('QuickSidebarController', ['$scope', function($scope) {    
    $scope.$on('$includeContentLoaded', function() {
       setTimeout(function(){
            QuickSidebar.init(); // init quick sidebar        
        }, 2000)
    });
}]);

/* Setup Layout Part - Theme Panel */
MetronicApp.controller('ThemePanelController', ['$scope', function($scope) {    
    $scope.$on('$includeContentLoaded', function() {
        Demo.init(); // init theme panel
    });
}]);

/* Setup Layout Part - Footer */
MetronicApp.controller('FooterController', ['$scope', function($scope) {
    $scope.$on('$includeContentLoaded', function() {
        Layout.initFooter(); // init footer
    });
}]);

/* Setup Rounting For All Pages */
MetronicApp.config(['$stateProvider', '$urlRouterProvider', function($stateProvider, $urlRouterProvider) {
    // Redirect any unmatched url
    $urlRouterProvider.otherwise("app/dashboard");  
    
    $stateProvider

        .state('app', {
            url: '/app',
            abstract: true,
            views: {
                'mainView': {
                    templateUrl: 'views/app.html',
                    controller: 'AppController' 
                }
            }
        })

        // Dashboard
        .state('app.dashboard', {
            url: "/dashboard",
            title: 'Incio',
            views: {
                'contentView': {
                    templateUrl: 'views/dashboard.html',
                    controller: 'DashboardController'
                }
            }
            // data: {
            //     requireLogin: true
            // }
        })      


}]);

/* Init global settings and run the app */
MetronicApp.run(["$rootScope", "$stateParams", "$templateCache","settings", "$state", function($rootScope, $stateParams, $templateCache, settings, $state) {
    $rootScope.$state = $state; // state to be accessed from view
    $rootScope.$settings = settings; // state to be accessed from view

    $rootScope.$on('$stateChangeStart', function(event, toState, toParams, fromState, fromParams) {
        var stateData;
        $rootScope.prevState = toState;
        $rootScope.prevState.params = toParams;
        stateData = toState.data;
        // if (stateData.requireLogin) {
        //      $state.go('login');
        // }
    });

    // $rootScope.baseUrl = 'http://itsubscriber.herokuapp.com:80'; 
    // $rootScope.baseUrl = 'http://localhost:8001'; 
}]);

// MetronicApp.run(function ($localStorage, $location) {
//     if ($localStorage.user.token) {
//       // Active session
//       console.log('Active session');
//       $location.path('/app/dashboard');
//     } else {
//       // Without session
//       console.log('Without session');
//       $localStorage.user = {};
//       $location.path('/login');
//     }
//   });

MetronicApp.factory('httpRequestInterceptor', ["$localStorage", "$location", "$q", function($localStorage, $location, $q) {
    return {
        request: request,
        responseError: responseError
    };

    function request(config) {
        // if (!config.url) {
        //     config.url = "#";
        // }

        if (config.url.endsWith('login')) {
            config.headers = {
                'Content-Type': 'application/x-www-form-urlencoded',
                'Accept': 'application/x-www-form-urlencoded'
            };
        } else {
            // config.headers = {
            //     'Content-Type': 'application/json',
            //     'Accept': 'application/json'
            // };
            if ($localStorage.user.token !== undefined) {
                config.headers.Authorization = 'Token ' + $localStorage.user.token;
            }
        }

        return config;
    }

    function responseError(response) {
        if (response.status === 403) {
            $location.url('/login');
        }
        return response;
    }
}]);

MetronicApp.config(["$httpProvider", function ($httpProvider) {
    $httpProvider.interceptors.push('httpRequestInterceptor');
}]);

var myApp = angular.module('its', ["MetronicApp"]);
